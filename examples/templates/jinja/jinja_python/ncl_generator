#!/usr/bin/env python3.7

from jinja2 import Environment, FileSystemLoader, select_autoescape
from pathlib import Path
import json, sys, logging

def deserialize_json(name):
    """ Deserealize a json file given as padding document 
        Information retrieves from it is used to fill in
        jinja templates.
    
    :param name: name of padding document
    """
    if Path(name).suffix != '.json':
        raise Exception(name)
    with open(name, "r") as file:    
        des_json = json.load(file)
    return des_json
    

def handle_name (name, max_split):
    """ Generate final ncl-document name.

    :param name: represents template document to 
    :param max_split: maximum number of divisions allowed in name
    """
    name_list = name.split('.', max_split)
    if name_list[0].find('child'):
        name_list = name_list[0].split('_')
    elif  name_list[0].find('base'):
        name_list = name_list[0].split ('_')
    return name_list[0] 

if __name__ == "__main__":
    padding_doc = sys.argv[1]
    template_doc = sys.argv[2]
    if len(sys.argv) == 4 and sys.argv[3] == '-d': 
        DEBUG = True
    else:
        DEBUG = False

    max_split = 1
    
    abs_path = Path.cwd()
    if DEBUG:
        print("Current working directory: {}".format(abs_path))
        log_initial = "Starting generating ncl document from {template_doc} with {padding_doc}..."\
                  .format(template_doc=template_doc,padding_doc=padding_doc)
        print (log_initial)

    env = Environment(
        loader=FileSystemLoader(str(abs_path.joinpath('templates'))),
        autoescape=select_autoescape(['ncl', 'xml']),
        trim_blocks=True,
        lstrip_blocks=True
    )

    #TODO:find a way to pass the 'younger' child template
    template = env.get_template(template_doc)

    try:
        context = {'files_list': deserialize_json(padding_doc)}
    except Exception as e:
        msg  = "Error: Padding document '{e}' in wrong format".format(e=e.args[0])
        print (msg)
    else:
        content = template.render(context)
        template_name = handle_name(template_doc, max_split)
        path = abs_path.joinpath(template_name + '.ncl')   
        with open(path , "w") as file:
            file.write(content)
        if DEBUG:
            print("Finished generating ncl document...")
