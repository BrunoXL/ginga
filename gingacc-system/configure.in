AC_INIT(configure.in)

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(gingaccsystem, 0.12.1)

AC_LANG_CPLUSPLUS
AC_PROG_CXX([g++])
AM_PROG_LIBTOOL

DIRECTFB_MAJOR_VERSION=1
DIRECTFB_MINOR_VERSION=0
DIRECTFB_MICRO_VERSION=0
DIRECTFB_INTERFACE_AGE=0
DIRECTFB_BINARY_AGE=0
DIRECTFB_VERSION=$DIRECTFB_MAJOR_VERSION.$DIRECTFB_MINOR_VERSION.$DIRECTFB_MICRO_VERSION

AC_SUBST(DIRECTFB_MAJOR_VERSION)
AC_SUBST(DIRECTFB_MINOR_VERSION)
AC_SUBST(DIRECTFB_MICRO_VERSION)
AC_SUBST(DIRECTFB_INTERFACE_AGE)
AC_SUBST(DIRECTFB_BINARY_AGE)
AC_SUBST(DIRECTFB_VERSION)

CXXFLAGS="-fPIC $CXXFLAGS"
CFLAGS="-fPIC $CFLAGS"

# Bring additional directories where things might be found into our
# search path. I don't know why autoconf doesn't do this by default
for spfx in /usr/lib /usr/local/lib /usr/local/lib/ginga; do
if test -d ${spfx}; then
LDFLAGS="-L${spfx} $LDFLAGS"
fi
done

for spfx in /usr/include /usr/local/include /usr/local/include/ginga /usr/local/include/directfb; do
if test -d ${spfx}; then
CPPFLAGS="-I${spfx} $CPPFLAGS"
fi
done

#TODO: Search telemidia-util include path
CPPFLAGS='-I${top_srcdir}'"/../../telemidia-util/include $CPPFLAGS" 
CPPFLAGS='-I${top_srcdir}'"/../gingacc-cpp/gingacc-system/include $CPPFLAGS"

###########
# HEADERS #
###########

##################
# TeleMidia Util #
##################

AC_CHECK_HEADER([util/functions.h], [], AC_MSG_ERROR([

Couldn't find TeleMidia Util headers.
Please install TeleMidia Util Headers.

]))


########
# LIBS #
########

##################
# TeleMidia Util #
##################

AC_HAVE_LIBRARY(telemidiautil, , AC_ERROR([

Couldn't find TeleMidia Util library.
Please install TeleMidia Util Library.

]))

#
# Find pkg-config
#
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test x$PKG_CONFIG = xno ; then
AC_MSG_ERROR([*** pkg-config not found. See http://pkgconfig.sourceforge.net])
fi

if ! pkg-config --atleast-pkgconfig-version 0.9 ; then
AC_MSG_ERROR([*** pkg-config too old; version 0.9 or better required.])
fi

############
# DirectFB #
############
DIRECTFB_MAX_VERSION=1.2.0
DIRECTFB_MIN_VERSION=$DIRECTFB_VERSION

DFB_LIBS='-L/usr/local/lib/ginga'

AC_MSG_CHECKING(for DirectFB == $DIRECTFB_MAN_VERSION)
if $PKG_CONFIG --atleast-version $DIRECTFB_MAX_VERSION directfb ; then
DFB_CFLAGS=`$PKG_CONFIG --cflags directfb`
DFB_LIBS=`$PKG_CONFIG --libs directfb`
DFB_VERSION=`$PKG_CONFIG --modversion directfb`
AC_MSG_RESULT([found (version $DFB_VERSION)])
AC_DEFINE(HAVE_DIRECTFB, 1, [Define to 1 if you have DFB support.])
AC_DEFINE(DFB_VER, 120, [Version Control.])
else
if $PKG_CONFIG --atleast-version $DIRECTFB_MIN_VERSION directfb ; then
DFB_CFLAGS=`$PKG_CONFIG --cflags directfb`
DFB_LIBS=`$PKG_CONFIG --libs directfb`
DFB_VERSION=`$PKG_CONFIG --modversion directfb`
AC_MSG_RESULT([found (version $DFB_VERSION)])
AC_DEFINE(HAVE_DIRECTFB, 1, [Define to 1 if you have DFB support.])
AC_DEFINE(DFB_VER, 100, [Version Control.])
else
AC_MSG_ERROR([
*** DirectFB $DIRECTFB_REQUIRED_VERSION or newer is required.
Try also "export PKG_CONFIG_PATH=..." and run configure again
])
fi
fi

AC_SUBST(DFB_LIBS)

################
# Fusion Sound #
################
fusionsound=yes
AC_ARG_ENABLE(fusionsound,
  [  --enable-fusionsound build project with FusionSound support [[default=yes]]],
  enable_fusionsound="$enableval", enable_fusionsound=yes)

AC_HAVE_LIBRARY(
  fusionsound,
  [],
  AC_MSG_WARN([*** fusion header not Found.])
    enable_fusionsound=no
)

if test x$enable_fusionsound = xno; then
   FUSIONSOUND_LIBS='-L/usr/local/lib/ginga'
   AC_DEFINE(HAVE_FUSIONSOUND, 0, [Define to 0 if you don't have FusionSound support.]),
   AC_MSG_WARN([*** Ginga FusionSound support will not be built.])
else
   FUSIONSOUND_LIBS=`$PKG_CONFIG --libs fusionsound`
   AC_DEFINE(HAVE_FUSIONSOUND, 1, [Define to 1 if you have FusionSound support.]),
   AC_MSG_RESULT([*** Ginga FusionSound support will be built.])
fi

AM_CONDITIONAL([FUSIONSOUND], [test x$enable_fusionsound = xyes])
AC_SUBST(FUSIONSOUND_LIBS)


DVC_LIBS=

########################
# XINE MAIN AV Support #
########################
xineprovider=no
AC_ARG_ENABLE(xineprovider,
  [  --enable-xineprovider build project with xine provider support (in order to decode main A/V) [[default=no]]],
  enable_xineprovider="$enableval", enable_xineprovider=no)

AC_CHECK_HEADER(
  [xine.h],
  [],
  AC_MSG_WARN([*** xine header not Found.])
    enable_xineprovider=no
)

if test x$enable_xineprovider = xno; then
   AC_MSG_WARN([*** Ginga Xine provider support will not be built.])
   AC_DEFINE(HAVE_XINEPROVIDER, 0, [Def to 0 if you don't have ginga xine provider support.])

else
   AC_MSG_RESULT([*** Ginga Xine provider support will be built.])
   AC_DEFINE(HAVE_XINEPROVIDER, 1, [Def to 1 if you don't have ginga xine provider support.])
   DVC_LIBS='/usr/src/ginga/deps/DirectFB-extra/lib/dvc/libdvc.la'
fi

AM_CONDITIONAL([XINEPROVIDER], [test x$enable_xineprovider = xyes])

##########################
# FFMPEG MAIN AV Support #
##########################
ffmpegprovider=no
AC_ARG_ENABLE(ffmpegprovider,
  [  --enable-ffmpegprovider build project with xine provider support (in order to decode main A/V) [[default=no]]],
  enable_ffmpegprovider="$enableval", enable_ffmpegprovider=no)

AC_CHECK_HEADER(
  [dvc/dvc.h],
  [],
  AC_MSG_WARN([*** dvc header not Found.])
    enable_ffmpegprovider=no
)

if test "x$enable_ffmpegprovider" = "xyes"; then
    AC_MSG_CHECKING([for libavcodec/libavformat])
    if $PKG_CONFIG libavcodec libavformat; then
        FFMPEG_CFLAGS=`$PKG_CONFIG --cflags libavcodec libavformat`
        FFMPEG_LIBS=`$PKG_CONFIG --libs libavcodec libavformat`
    else
        FFMPEG_CFLAGS='-L/usr/local/lib'
        FFMPEG_LIBS='-L/usr/local/lib'
        enable_ffmpegprovider=no
    fi
fi

if test x$enable_ffmpegprovider = xno; then
   AC_MSG_WARN([*** Ginga FFmpeg provider support will not be built.])
   AC_DEFINE(HAVE_FFMPEGPROVIDER, 0, [Def to 0 if you don't have ginga ffmpeg provider support.])

else
   AC_MSG_RESULT([*** Ginga FFmpeg provider support will be built.])
   AC_DEFINE(HAVE_FFMPEGPROVIDER, 1, [Def to 1 if you have ginga ffmpeg provider support.])
   DVC_LIBS='/usr/src/ginga/deps/DirectFB-extra/lib/dvc/libdvc.la'
fi

AC_SUBST(FFMPEG_CFLAGS)
AC_SUBST(FFMPEG_LIBS)
AC_SUBST(DVC_LIBS)
AM_CONDITIONAL([FFMPEGPROVIDER], [test x$enable_ffmpegprovider = xyes])

############################################
# Offering a non-componentized alternative #
############################################
components=yes
AC_ARG_ENABLE(components,
  [  --enable-components build project using components [[default=yes]]],
  enable_components="$enableval", enable_components=yes)

if test x$enable_components = xno; then
   COMPONENTS_LIBS='-L/usr/local/lib/ -L/usr/local/lib/ginga/'
   AC_DEFINE(HAVE_COMPSUPPORT, 0, [Def to 0 if you don't have Component support.])
   AC_MSG_WARN([*** Component support will not be built.])
else
   COMPONENTS_LIBS='-ldl -L/usr/local/lib/ -L/usr/local/lib/ginga/'
   AC_DEFINE(HAVE_COMPSUPPORT, 1, [Def to 1 if you have Component support.])
   AC_MSG_RESULT([*** Component support will be built.])
fi

AM_CONDITIONAL(COMPONENTS, test "$enable_components" = "no")
AC_SUBST(COMPONENTS_LIBS)

###########################
# Multple Process Support #
###########################
multiprocess=no
AC_ARG_ENABLE(multiprocess,
  [  --enable-multiprocess build project with multiple process support [[default=no]]],
  enable_multiprocess="$enableval", enable_multiprocess=no)

if test x$enable_multiprocess = xno; then
   MULTIPROCESS_LIBS='-L/usr/local/lib/ginga/'
   AC_DEFINE(HAVE_MULTIPROCESS, 0, [Def to 0 if you don't have Multiple Process support.])
   AC_MSG_WARN([*** Multiple process support will not be built.])
else
   MULTIPROCESS_LIBS='-lrt -lpthread -ltelemidiautil -L/usr/local/lib/ginga/'
   AC_DEFINE(HAVE_MULTIPROCESS, 1, [Def to 1 if you have Multiple Process support.])
   AC_MSG_RESULT([*** Multiple Process support will be built.])
fi

AM_CONDITIONAL([MULTIPROCESS], [test x$enable_multiprocess = xyes])
AC_SUBST(MULTIPROCESS_LIBS)


AC_OUTPUT(
	Makefile
	include/system/thread/Makefile
	include/system/process/Makefile 
	include/system/io/Makefile
	include/system/io/interface/Makefile 
	include/system/io/interface/content/Makefile
	include/system/io/interface/content/image/Makefile
	include/system/io/interface/content/text/Makefile
	include/system/io/interface/device/Makefile
	include/system/io/interface/input/Makefile
	include/system/io/interface/output/Makefile
	include/system/io/interface/output/dfb/Makefile
	src/thread/Makefile 
	src/process/Makefile
	src/io/Makefile
    	src/io/interface/content/audio/Makefile
    	src/io/interface/content/image/Makefile
    	src/io/interface/content/text/Makefile
    	src/io/interface/content/video/Makefile
	files/Makefile
	test/Makefile
)
