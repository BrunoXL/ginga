AC_INIT(configure.in)

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(gingaccplayer, 0.12.2)

AC_LANG_CPLUSPLUS
AC_PROG_CXX([g++])
#AM_PROG_LIBTOOL

CXXFLAGS="-fPIC $CXXFLAGS"
CFLAGS="-fPIC $CFLAGS"

######################
# Finding pkg-config #
######################
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test x$PKG_CONFIG = xno ; then
AC_MSG_ERROR([*** pkg-config not found. See http://pkgconfig.sourceforge.net])
fi

if ! pkg-config --atleast-pkgconfig-version 0.9 ; then
AC_MSG_ERROR([*** pkg-config too old; version 0.9 or better required.])
fi

# Bring additional directories where things might be found into our
# search path. I don't know why autoconf doesn't do this by default
for spfx in /usr/lib/ /usr/local/lib/ /usr/local/lib/ginga/ /usr/local/lib/ginga/iocontents /usr/local/lib/ginga/ic; do
if test -d ${spfx}; then
LDFLAGS="-L${spfx} $LDFLAGS"
fi
done

for spfx in /usr/include/ /usr/local/include/ /usr/local/include/ginga/; do
if test -d ${spfx}; then
CPPFLAGS="-I${spfx} $CPPFLAGS"
fi
done
#TODO: Search telemidia-util, gingacc-sytem, ... include paths 
CPPFLAGS='-I${top_srcdir}'"/../../telemidia-util/include $CPPFLAGS"
CPPFLAGS='-I${top_srcdir}'"/../gingacc-system/include $CPPFLAGS"
CPPFLAGS='-I${top_srcdir}'"/../gingacc-dataprocessing/include $CPPFLAGS"

###########
# HEADERS #
###########

############################
# Ginga CC Data Processing #
############################
AC_CHECK_HEADER([dataprocessing/IDataProcessor.h], [], AC_MSG_ERROR([

Couldn't find Ginga CC Data Processing headers.
Please install Ginga CC Data Processing Headers.

]))


##################
# TeleMidia Util #
##################
AC_CHECK_HEADER([util/functions.h], [], AC_MSG_ERROR([

Couldn't find TeleMidia Util headers.
Please install TeleMidia Util Headers.

]))

##########################
# Ginga CC System Thread #
##########################
AC_CHECK_HEADER([system/thread/Thread.h], [], AC_MSG_ERROR([

Couldn't find Ginga CC System Thread headers.
Please install Ginga CC System Thread Headers.

]))

#######
# Lua #
#######
AC_CHECK_HEADER([lua.h], [], AC_MSG_ERROR([

Couldn't find Lua headers.
Please install Lua 5.1.2 or later.

]))

#######################
# Ginga CC System I/O #
#######################
AC_CHECK_HEADER([system/io/interface/IIOContainer.h], [], AC_MSG_ERROR([

Couldn't find Ginga Common Core System I/O headers.
Please install gingacc-system project.

]))


########
# LIBS #
########

##################
# TeleMidia Util #
##################
AC_HAVE_LIBRARY(telemidiautil, , AC_ERROR([

Couldn't find TeleMidia Util library.
Please install TeleMidia Util Library.

]))

############################
# Ginga CC Data Processing #
############################
AC_HAVE_LIBRARY(gingaccdataprocessing, , AC_ERROR([

Couldn't find Ginga CC Data Processing library.
Please install Ginga CC Data Processing Library.

]))

##########################
# Ginga CC System Thread #
##########################
AC_HAVE_LIBRARY(gingaccsystemthread, , AC_ERROR([

Couldn't find Ginga CC System Thread library.
Please install Ginga CC System Thread Library.

]))

#######
# Lua #
#######
AC_HAVE_LIBRARY(lua, , AC_ERROR([

Couldn't find Lua library.
Please install Lua 5.1.2 or later.

]))

#################
# GINGACCIC RTP #
#################
hasrtpic=no
AC_HAVE_LIBRARY(gingaccicccrtp, hasrtpic=yes, hasrtpic=no)

if test x$hasrtpic = xno; then
   AC_MSG_WARN([*** Ginga-NCL RTP support will not be built.])
   AC_DEFINE(HAVE_CCRTPIC, 0, [Def to 0 if you don't have gingaccic rtp support.])

else
   AC_MSG_RESULT([*** Ginga-NCL RTP support will be built.])
   AC_DEFINE(HAVE_CCRTPIC, 1, [Def to 1 if you have gingaccic rtp support.])
fi

AM_CONDITIONAL(CCRTPIC, test x$hasrtpic = xyes)

########################
# XineProvider Support #
########################

hasxinep=no
AC_HAVE_LIBRARY(gingaccsysctsxineav, hasxinep=yes, hasxinep=no)

if test x$hasxinep = xno; then
   AC_MSG_WARN([*** Xine Provider support will not be built.])
   AC_DEFINE(HAVE_XINEPROVIDER, 0, [Def to 0 if you don't have xine provider support.])

else
   AC_MSG_RESULT([*** Xine Provider support will be built.])
   AC_DEFINE(HAVE_XINEPROVIDER, 1, [Def to 1 if you have xine provider support.])
fi

AM_CONDITIONAL(XINEPROVIDER, test x$hasxinep = xyes)

##########################
# FFmpegProvider Support #
##########################

hasffmpegp=no
AC_HAVE_LIBRARY(gingaccsysctsxineav, hasffmpegp=yes, hasffmpegp=no)

if test x$hasffmpegp = xno; then
   AC_MSG_WARN([*** FFmpeg Provider support will not be built.])
   AC_DEFINE(HAVE_FFMPEGPROVIDER, 0, [Def to 0 if you don't have FFmpeg provider support.])

else
   AC_MSG_RESULT([*** FFmpeg Provider support will be built.])
   AC_DEFINE(HAVE_FFMPEGPROVIDER, 1, [Def to 1 if you have FFmpeg provider support.])
fi

AM_CONDITIONAL(FFMPEGPROVIDER, test x$hasffmpegp = xyes)

##############
# JAVA check #
##############
ncletplayer=no
AC_ARG_ENABLE(ncletplayer,
  [  --enable-ncletplayer    build nclet player support [[default=no]]],
  enable_ncletplayer="$enableval", enable_ncletplayer=no)

if test x$enable_ncletplayer = xyes; then
  AC_HAVE_LIBRARY(jni, [
      AC_CHECK_HEADER(jni.h,
        ncletplayer=yes
        NCLET_LIBS='-ljni'
        NCLET_HEADERS='NCLetPlayer.h'
        AC_DEFINE(HAVE_NCLET, 1, [Def to 1 if you have nclet player support.]),
        AC_MSG_WARN([
*** Headers not found -- nclet player support will not be built.]))
    ], [
      AC_MSG_WARN([
*** jni not found -- nclet player support will not be built.])
    ], -lm)
fi

AM_CONDITIONAL(NCLET, test x$ncletplayer = xyes)
AC_SUBST(NCLET_LIBS)
AC_SUBST(NCLET_HEADERS)

#####################################
# Offering a time stamp alternative #
#####################################
clocktime=yes
AC_ARG_ENABLE(clocktime,
  [  --enable-clocktime build project using clock to player time [[default=yes]]],
  enable_clocktime="$enableval", enable_clocktime=yes)

if test x$enable_clocktime = xno; then
   AC_DEFINE(HAVE_CLOCKTIME, 0, [Def to 0 if you don't have timer support.])
   AC_MSG_WARN([*** Clock time support will not be built (using PTS instead.])

else
   AC_DEFINE(HAVE_CLOCKTIME, 1, [Def to 1 if you have timer support.])
   AC_MSG_RESULT([*** Clock time support will be built.])
fi

AM_CONDITIONAL(clocktime, test "$enable_clocktime" = "no")

############################################
# Offering a non-componentized alternative #
############################################
components=yes
AC_ARG_ENABLE(components,
  [  --enable-components build project using components [[default=yes]]],
  enable_components="$enableval", enable_components=yes)

if test x$enable_components = xno; then
   COMPONENTS_LIBS='-lgingaccsysctsdfbf -lgingaccsysctsfs \
    -lgingaccsysctsimgdfb -lgingaccsysctsdfbav \
    -lgingaccsysctsxineav \
    -lgingaccsystemio -lgingaccsystemiocodemap \
    -lgingaccsystemiodfb -lgingaccsystemthread -lgingaccic \
    -lgingaccdataprocessing \
    -L/usr/local/lib/ginga/ -L/usr/local/lib \
    -L/usr/local/lib/ginga/iocontents/ \
    -L/usr/local/lib/lua/5.1 -L/usr/local/lib/lua/5.1/socket'
   COMPONENTS_INCS='-I/usr/local/include/ginga -I/usr/local/include/directfb/'
   AC_DEFINE(HAVE_COMPSUPPORT, 0, [Def to 0 if you don't have Component support.])
   AC_MSG_WARN([*** Component support will not be built.])

else
   COMPONENTS_LIBS='-ldl -L/usr/local/lib/ -L/usr/local/lib/ginga/'
   COMPONENTS_INCS='-I/usr/local/include/ginga'
   AC_DEFINE(HAVE_COMPSUPPORT, 1, [Def to 1 if you have Component support.])
   AC_MSG_RESULT([*** Component support will be built.])
fi

AM_CONDITIONAL(COMPONENTS, test "$enable_components" = "no")
AC_SUBST(COMPONENTS_LIBS)
AC_SUBST(COMPONENTS_INCS)

#####################
# Berkelium Support #
#####################
berkelium=yes
AC_ARG_ENABLE(berkelium,
  [  --enable-berkelium build project with berkelium player [[default=yes]]],
  enable_berkelium="$enableval", enable_berkelium=yes)

AC_CHECK_HEADER(
  [berkelium/Berkelium.hpp],
  [],
  AC_MSG_WARN([*** Berkelium header not Found.])
    enable_berkelium=no
)

if test x$enable_berkelium = xno; then
   AC_MSG_WARN([*** Ginga Berkelium Player support will not be built.])
   AC_DEFINE(HAVE_BERKELIUM, 0, [Def to 0 if you don't have ginga berkelium support.])

else
   BKL_CFLAGS=`$PKG_CONFIG --cflags glib-2.0`
   BKL_LIBS=`$PKG_CONFIG --libs glib-2.0`
   TEST_LIBS='-lgingaccplabkl -llibberkelium'
   AC_MSG_RESULT([*** Ginga Berkelium Player support will be built.])
   AC_DEFINE(HAVE_BERKELIUM, 1, [Def to 1 if you have ginga berkelium support.])
fi

AM_CONDITIONAL([BERKELIUMLIB], [test x$enable_berkelium = xyes])
AC_SUBST(BKL_LIBS)
AC_SUBST(BKL_CFLAGS)

#################
# Links Support #
#################
links=yes
AC_ARG_ENABLE(links,
  [  --enable-links build project with links player [[default=yes]]],
  enable_links="$enableval", enable_links=yes)

AC_HAVE_LIBRARY(telemidialinks, ,
  AC_MSG_WARN([*** TeleMidia Links Library not Found.])
    enable_links=no
)

if test x$enable_links = xno; then
   AC_MSG_WARN([*** Ginga Links Player support will not be built.])
   AC_DEFINE(HAVE_LINKS, 0, [Def to 0 if you don't have ginga links support.])

else
if test x$enable_berkelium = xno; then
   TEST_LIBS='-lgingaccplalks -ltelemidialinks'
else
   TEST_LIBS='-lgingaccplabkl -llibberkelium -lgingaccplalks -ltelemidialinks'
fi
   AC_MSG_RESULT([*** Ginga Links Player support will be built.])
   AC_DEFINE(HAVE_LINKS, 1, [Def to 1 if you have ginga links support.])
fi

AM_CONDITIONAL([LINKSLIB], [test x$enable_links = xyes])
AC_SUBST(TEST_LIBS)

###########################
# Multple Process Support #
###########################
multiprocess=no
AC_ARG_ENABLE(multiprocess,
  [  --enable-multiprocess build project with multiple process support [[default=no]]],
  enable_multiprocess="$enableval", enable_multiprocess=no)

if test x$enable_multiprocess = xno; then
   MULTIPROCESS_LIBS='-L/usr/local/lib/ginga/'
   AC_DEFINE(HAVE_MULTIPROCESS, 0, [Def to 0 if you don't have Multiple Process support.])
   AC_MSG_WARN([*** Multiple process support will not be built.])

else
   MULTIPROCESS_LIBS='-lrt -lgingaccsystemprocess -lpthread -L/usr/local/lib/ginga/'
   AC_DEFINE(HAVE_MULTIPROCESS, 1, [Def to 1 if you have Multiple Process support.])
   AC_MSG_RESULT([*** Multiple Process support will be built.])
fi

AM_CONDITIONAL([MULTIPROCESS], [test x$enable_multiprocess = xyes])
AC_SUBST(MULTIPROCESS_LIBS)

AC_OUTPUT(Makefile
	files/Makefile
	files/scripts/Makefile
	include/player/Makefile
	src/Makefile
	src/image/Makefile
	src/application/imperative/lua/Makefile
	src/application/declarative/xhtml/links/Makefile
	src/application/declarative/xhtml/berkelium/Makefile
	src/text/Makefile src/text/plain/Makefile
	src/text/srt/Makefile
	src/video/Makefile
	src/tv/Makefile
	src/widget/Makefile
	tools/Makefile test/Makefile)

AC_MSG_RESULT([
Build options: 
  Module directory          $MODULEDIR
  Xine Provider Support     $hasxinep
  FFmpeg Provider Support   $hasffmpegp
  Links Player Support      $enable_links
  Berkelium Player Support  $enable_berkelium
  NCLET Support             $ncletplayer
  Multi Process Support     $enable_multiprocess
])
